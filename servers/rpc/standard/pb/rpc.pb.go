// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	RequestContext
	ResponseContext
	ResponseNoResultContext
	HBRequest
	HBResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestContext struct {
	Service string            `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Args    map[string]string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RequestContext) Reset()                    { *m = RequestContext{} }
func (m *RequestContext) String() string            { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()               {}
func (*RequestContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestContext) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RequestContext) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ResponseContext struct {
	Status int32             `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Params map[string]string `protobuf:"bytes,2,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Result string            `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
}

func (m *ResponseContext) Reset()                    { *m = ResponseContext{} }
func (m *ResponseContext) String() string            { return proto.CompactTextString(m) }
func (*ResponseContext) ProtoMessage()               {}
func (*ResponseContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseContext) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResponseContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ResponseContext) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type ResponseNoResultContext struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *ResponseNoResultContext) Reset()                    { *m = ResponseNoResultContext{} }
func (m *ResponseNoResultContext) String() string            { return proto.CompactTextString(m) }
func (*ResponseNoResultContext) ProtoMessage()               {}
func (*ResponseNoResultContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseNoResultContext) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type HBRequest struct {
	Ping int32 `protobuf:"varint,1,opt,name=Ping" json:"Ping,omitempty"`
}

func (m *HBRequest) Reset()                    { *m = HBRequest{} }
func (m *HBRequest) String() string            { return proto.CompactTextString(m) }
func (*HBRequest) ProtoMessage()               {}
func (*HBRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HBRequest) GetPing() int32 {
	if m != nil {
		return m.Ping
	}
	return 0
}

type HBResponse struct {
	Pong int32 `protobuf:"varint,1,opt,name=Pong" json:"Pong,omitempty"`
}

func (m *HBResponse) Reset()                    { *m = HBResponse{} }
func (m *HBResponse) String() string            { return proto.CompactTextString(m) }
func (*HBResponse) ProtoMessage()               {}
func (*HBResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HBResponse) GetPong() int32 {
	if m != nil {
		return m.Pong
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestContext)(nil), "pb.RequestContext")
	proto.RegisterType((*ResponseContext)(nil), "pb.ResponseContext")
	proto.RegisterType((*ResponseNoResultContext)(nil), "pb.ResponseNoResultContext")
	proto.RegisterType((*HBRequest)(nil), "pb.HBRequest")
	proto.RegisterType((*HBResponse)(nil), "pb.HBResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPC service

type RPCClient interface {
	Request(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseContext, error)
	Query(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseContext, error)
	Update(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseNoResultContext, error)
	Delete(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseNoResultContext, error)
	Insert(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseNoResultContext, error)
	Heartbeat(ctx context.Context, in *HBRequest, opts ...grpc.CallOption) (*HBResponse, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Request(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseContext, error) {
	out := new(ResponseContext)
	err := grpc.Invoke(ctx, "/pb.RPC/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Query(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseContext, error) {
	out := new(ResponseContext)
	err := grpc.Invoke(ctx, "/pb.RPC/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Update(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseNoResultContext, error) {
	out := new(ResponseNoResultContext)
	err := grpc.Invoke(ctx, "/pb.RPC/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Delete(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseNoResultContext, error) {
	out := new(ResponseNoResultContext)
	err := grpc.Invoke(ctx, "/pb.RPC/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Insert(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*ResponseNoResultContext, error) {
	out := new(ResponseNoResultContext)
	err := grpc.Invoke(ctx, "/pb.RPC/Insert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Heartbeat(ctx context.Context, in *HBRequest, opts ...grpc.CallOption) (*HBResponse, error) {
	out := new(HBResponse)
	err := grpc.Invoke(ctx, "/pb.RPC/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC service

type RPCServer interface {
	Request(context.Context, *RequestContext) (*ResponseContext, error)
	Query(context.Context, *RequestContext) (*ResponseContext, error)
	Update(context.Context, *RequestContext) (*ResponseNoResultContext, error)
	Delete(context.Context, *RequestContext) (*ResponseNoResultContext, error)
	Insert(context.Context, *RequestContext) (*ResponseNoResultContext, error)
	Heartbeat(context.Context, *HBRequest) (*HBResponse, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Request(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Query(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Update(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Delete(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Insert(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RPC/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Heartbeat(ctx, req.(*HBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _RPC_Request_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _RPC_Query_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RPC_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RPC_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _RPC_Insert_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _RPC_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0x76, 0xeb, 0xe8, 0x19, 0x4e, 0x89, 0xa2, 0xa5, 0x0a, 0x1b, 0xbd, 0xda, 0x85,
	0x14, 0x9d, 0xc2, 0xfc, 0x73, 0xa5, 0x53, 0x98, 0x37, 0x32, 0x0b, 0x3e, 0x40, 0x3a, 0x0f, 0x65,
	0x38, 0x9b, 0x98, 0xa4, 0xc3, 0x3d, 0x88, 0x8f, 0xe2, 0x9b, 0xf8, 0x40, 0xd2, 0xb4, 0x1d, 0x9b,
	0x0e, 0x64, 0xbb, 0xcb, 0x09, 0xbf, 0xdf, 0x97, 0x8f, 0x53, 0x0a, 0x8e, 0xe0, 0xa3, 0x80, 0x0b,
	0xa6, 0x18, 0x31, 0x79, 0xe4, 0x7f, 0x1a, 0xd0, 0x0c, 0xf1, 0x3d, 0x45, 0xa9, 0xfa, 0x2c, 0x51,
	0xf8, 0xa1, 0x88, 0x0b, 0x75, 0x89, 0x62, 0x3a, 0x1e, 0xa1, 0x6b, 0xb4, 0x8d, 0x8e, 0x13, 0x96,
	0x23, 0x39, 0x81, 0x2a, 0x15, 0xb1, 0x74, 0xcd, 0xb6, 0xd5, 0x69, 0x74, 0x8f, 0x02, 0x1e, 0x05,
	0xcb, 0x6e, 0x70, 0x23, 0x62, 0x79, 0x9f, 0x28, 0x31, 0x0b, 0x35, 0xe9, 0xf5, 0xc0, 0x99, 0x5f,
	0x91, 0x1d, 0xb0, 0x5e, 0x71, 0x56, 0x84, 0x66, 0x47, 0xb2, 0x07, 0xb5, 0x29, 0x9d, 0xa4, 0xe8,
	0x9a, 0xfa, 0x2e, 0x1f, 0xae, 0xcc, 0x0b, 0xc3, 0xff, 0x32, 0x60, 0x3b, 0x44, 0xc9, 0x59, 0x22,
	0xb1, 0x2c, 0xb6, 0x0f, 0xb6, 0x54, 0x54, 0xa5, 0x52, 0x47, 0xd4, 0xc2, 0x62, 0x22, 0x3d, 0xb0,
	0x39, 0x15, 0xf4, 0xad, 0x2c, 0xd6, 0xca, 0x8b, 0x2d, 0xc9, 0xc1, 0x50, 0x13, 0x79, 0xb7, 0x02,
	0xcf, 0x02, 0x05, 0xca, 0x74, 0xa2, 0x5c, 0x4b, 0xbf, 0x5f, 0x4c, 0xde, 0x25, 0x34, 0x16, 0xf0,
	0xb5, 0x7a, 0x9f, 0xc2, 0x41, 0xf9, 0xf2, 0x23, 0x0b, 0x75, 0xdc, 0x3f, 0xf5, 0xfd, 0x16, 0x38,
	0x83, 0xdb, 0x62, 0x8f, 0x84, 0x40, 0x75, 0x38, 0x4e, 0xe2, 0x02, 0xd1, 0x67, 0xbf, 0x0d, 0x90,
	0x01, 0x79, 0xaa, 0x26, 0xd8, 0x02, 0xc1, 0x92, 0xb8, 0xfb, 0x6d, 0x82, 0x15, 0x0e, 0xfb, 0xe4,
	0x1c, 0xea, 0xf3, 0xa0, 0xbf, 0x5f, 0xc7, 0xdb, 0x5d, 0xb1, 0x18, 0xbf, 0x42, 0xba, 0x50, 0x7b,
	0x4a, 0x51, 0xcc, 0xd6, 0x71, 0xae, 0xc1, 0x7e, 0xe6, 0x2f, 0x54, 0xe1, 0x4a, 0xe9, 0x70, 0x51,
	0xfa, 0xb5, 0x87, 0x5c, 0xbe, 0xc3, 0x09, 0x6e, 0x2c, 0x3f, 0x24, 0x12, 0x85, 0xda, 0x44, 0x3e,
	0x06, 0x67, 0x80, 0x54, 0xa8, 0x08, 0xa9, 0x22, 0x5b, 0x19, 0x3b, 0x5f, 0xbd, 0xd7, 0x2c, 0xc7,
	0x5c, 0xf6, 0x2b, 0x91, 0xad, 0xff, 0x93, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x14,
	0xb0, 0xa2, 0x34, 0x03, 0x00, 0x00,
}
